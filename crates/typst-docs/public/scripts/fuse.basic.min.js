var e, t;
(e = this),
  (t = function () {
    "use strict";
    function gt(i, n) {
      var o = Object.keys(i);
      if (Object.getOwnPropertySymbols) {
        var r = Object.getOwnPropertySymbols(i);
        n &&
          (r = r.filter(function (a) {
            return Object.getOwnPropertyDescriptor(i, a).enumerable;
          })),
          o.push.apply(o, r);
      }
      return o;
    }
    function C(i) {
      for (var n = 1; n < arguments.length; n++) {
        var o = arguments[n] != null ? arguments[n] : {};
        n % 2
          ? gt(Object(o), !0).forEach(function (r) {
              Tt(i, r, o[r]);
            })
          : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(i, Object.getOwnPropertyDescriptors(o))
          : gt(Object(o)).forEach(function (r) {
              Object.defineProperty(
                i,
                r,
                Object.getOwnPropertyDescriptor(o, r)
              );
            });
      }
      return i;
    }
    function rt(i) {
      return (
        (rt =
          typeof Symbol == "function" && typeof Symbol.iterator == "symbol"
            ? function (n) {
                return typeof n;
              }
            : function (n) {
                return n &&
                  typeof Symbol == "function" &&
                  n.constructor === Symbol &&
                  n !== Symbol.prototype
                  ? "symbol"
                  : typeof n;
              }),
        rt(i)
      );
    }
    function Q(i, n) {
      if (!(i instanceof n))
        throw new TypeError("Cannot call a class as a function");
    }
    function vt(i, n) {
      for (var o = 0; o < n.length; o++) {
        var r = n[o];
        (r.enumerable = r.enumerable || !1),
          (r.configurable = !0),
          "value" in r && (r.writable = !0),
          Object.defineProperty(i, r.key, r);
      }
    }
    function X(i, n, o) {
      return (
        n && vt(i.prototype, n),
        o && vt(i, o),
        Object.defineProperty(i, "prototype", { writable: !1 }),
        i
      );
    }
    function Tt(i, n, o) {
      return (
        n in i
          ? Object.defineProperty(i, n, {
              value: o,
              enumerable: !0,
              configurable: !0,
              writable: !0,
            })
          : (i[n] = o),
        i
      );
    }
    function it(i) {
      return (
        (function (n) {
          if (Array.isArray(n)) return ot(n);
        })(i) ||
        (function (n) {
          if (
            (typeof Symbol < "u" && n[Symbol.iterator] != null) ||
            n["@@iterator"] != null
          )
            return Array.from(n);
        })(i) ||
        (function (n, o) {
          if (n) {
            if (typeof n == "string") return ot(n, o);
            var r = Object.prototype.toString.call(n).slice(8, -1);
            return (
              r === "Object" && n.constructor && (r = n.constructor.name),
              r === "Map" || r === "Set"
                ? Array.from(n)
                : r === "Arguments" ||
                  /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                ? ot(n, o)
                : void 0
            );
          }
        })(i) ||
        (function () {
          throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
        })()
      );
    }
    function ot(i, n) {
      (n == null || n > i.length) && (n = i.length);
      for (var o = 0, r = new Array(n); o < n; o++) r[o] = i[o];
      return r;
    }
    function O(i) {
      return Array.isArray ? Array.isArray(i) : yt(i) === "[object Array]";
    }
    function x(i) {
      return typeof i == "string";
    }
    function mt(i) {
      return typeof i == "number";
    }
    function Dt(i) {
      return (
        i === !0 ||
        i === !1 ||
        ((function (n) {
          return (
            (function (o) {
              return rt(o) === "object";
            })(n) && n !== null
          );
        })(i) &&
          yt(i) == "[object Boolean]")
      );
    }
    function y(i) {
      return i != null;
    }
    function at(i) {
      return !i.trim().length;
    }
    function yt(i) {
      return i == null
        ? i === void 0
          ? "[object Undefined]"
          : "[object Null]"
        : Object.prototype.toString.call(i);
    }
    var Vt = "Extended search is not available",
      zt = function (i) {
        return "Pattern length exceeds max of ".concat(i, ".");
      },
      pt = Object.prototype.hasOwnProperty,
      Bt = (function () {
        function i(n) {
          var o = this;
          Q(this, i), (this._keys = []), (this._keyMap = {});
          var r = 0;
          n.forEach(function (a) {
            var s = bt(a);
            (r += s.weight),
              o._keys.push(s),
              (o._keyMap[s.id] = s),
              (r += s.weight);
          }),
            this._keys.forEach(function (a) {
              a.weight /= r;
            });
        }
        return (
          X(i, [
            {
              key: "get",
              value: function (n) {
                return this._keyMap[n];
              },
            },
            {
              key: "keys",
              value: function () {
                return this._keys;
              },
            },
            {
              key: "toJSON",
              value: function () {
                return JSON.stringify(this._keys);
              },
            },
          ]),
          i
        );
      })();
    function bt(i) {
      var n = null,
        o = null,
        r = null,
        a = 1,
        s = null;
      if (x(i) || O(i)) (r = i), (n = kt(i)), (o = Mt(i));
      else {
        if (!pt.call(i, "name"))
          throw new Error(
            (function (u) {
              return "Missing ".concat(u, " property in key");
            })("name")
          );
        var c = i.name;
        if (((r = c), pt.call(i, "weight") && (a = i.weight) <= 0))
          throw new Error(
            (function (u) {
              return "Property 'weight' in key '".concat(
                u,
                "' must be a positive integer"
              );
            })(c)
          );
        (n = kt(c)), (o = Mt(c)), (s = i.getFn);
      }
      return { path: n, id: o, weight: a, src: r, getFn: s };
    }
    function kt(i) {
      return O(i) ? i : i.split(".");
    }
    function Mt(i) {
      return O(i) ? i.join(".") : i;
    }
    var Gt = {
        useExtendedSearch: !1,
        getFn: function (i, n) {
          var o = [],
            r = !1;
          return (
            (function a(s, c, u) {
              if (y(s))
                if (c[u]) {
                  var h = s[c[u]];
                  if (!y(h)) return;
                  if (u === c.length - 1 && (x(h) || mt(h) || Dt(h)))
                    o.push(
                      (function (f) {
                        return f == null
                          ? ""
                          : (function (m) {
                              if (typeof m == "string") return m;
                              var v = m + "";
                              return v == "0" && 1 / m == -1 / 0 ? "-0" : v;
                            })(f);
                      })(h)
                    );
                  else if (O(h)) {
                    r = !0;
                    for (var l = 0, g = h.length; l < g; l += 1)
                      a(h[l], c, u + 1);
                  } else c.length && a(h, c, u + 1);
                } else o.push(s);
            })(i, x(n) ? n.split(".") : n, 0),
            r ? o : o[0]
          );
        },
        ignoreLocation: !1,
        ignoreFieldNorm: !1,
        fieldNormWeight: 1,
      },
      d = C(
        C(
          C(
            C(
              {},
              {
                isCaseSensitive: !1,
                includeScore: !1,
                keys: [],
                shouldSort: !0,
                sortFn: function (i, n) {
                  return i.score === n.score
                    ? i.idx < n.idx
                      ? -1
                      : 1
                    : i.score < n.score
                    ? -1
                    : 1;
                },
              }
            ),
            { includeMatches: !1, findAllMatches: !1, minMatchCharLength: 1 }
          ),
          { location: 0, threshold: 0.6, distance: 100 }
        ),
        Gt
      ),
      Ht = /[^ ]+/g;
    function Qt() {
      var i =
          arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1,
        n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3,
        o = new Map(),
        r = Math.pow(10, n);
      return {
        get: function (a) {
          var s = a.match(Ht).length;
          if (o.has(s)) return o.get(s);
          var c = 1 / Math.pow(s, 0.5 * i),
            u = parseFloat(Math.round(c * r) / r);
          return o.set(s, u), u;
        },
        clear: function () {
          o.clear();
        },
      };
    }
    var st = (function () {
      function i() {
        var n =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
          o = n.getFn,
          r = o === void 0 ? d.getFn : o,
          a = n.fieldNormWeight,
          s = a === void 0 ? d.fieldNormWeight : a;
        Q(this, i),
          (this.norm = Qt(s, 3)),
          (this.getFn = r),
          (this.isCreated = !1),
          this.setIndexRecords();
      }
      return (
        X(i, [
          {
            key: "setSources",
            value: function () {
              var n =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : [];
              this.docs = n;
            },
          },
          {
            key: "setIndexRecords",
            value: function () {
              var n =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : [];
              this.records = n;
            },
          },
          {
            key: "setKeys",
            value: function () {
              var n = this,
                o =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : [];
              (this.keys = o),
                (this._keysMap = {}),
                o.forEach(function (r, a) {
                  n._keysMap[r.id] = a;
                });
            },
          },
          {
            key: "create",
            value: function () {
              var n = this;
              !this.isCreated &&
                this.docs.length &&
                ((this.isCreated = !0),
                x(this.docs[0])
                  ? this.docs.forEach(function (o, r) {
                      n._addString(o, r);
                    })
                  : this.docs.forEach(function (o, r) {
                      n._addObject(o, r);
                    }),
                this.norm.clear());
            },
          },
          {
            key: "add",
            value: function (n) {
              var o = this.size();
              x(n) ? this._addString(n, o) : this._addObject(n, o);
            },
          },
          {
            key: "removeAt",
            value: function (n) {
              this.records.splice(n, 1);
              for (var o = n, r = this.size(); o < r; o += 1)
                this.records[o].i -= 1;
            },
          },
          {
            key: "getValueForItemAtKeyId",
            value: function (n, o) {
              return n[this._keysMap[o]];
            },
          },
          {
            key: "size",
            value: function () {
              return this.records.length;
            },
          },
          {
            key: "_addString",
            value: function (n, o) {
              if (y(n) && !at(n)) {
                var r = { v: n, i: o, n: this.norm.get(n) };
                this.records.push(r);
              }
            },
          },
          {
            key: "_addObject",
            value: function (n, o) {
              var r = this,
                a = { i: o, $: {} };
              this.keys.forEach(function (s, c) {
                var u = s.getFn ? s.getFn(n) : r.getFn(n, s.path);
                if (y(u)) {
                  if (O(u))
                    (function () {
                      for (
                        var l = [], g = [{ nestedArrIndex: -1, value: u }];
                        g.length;

                      ) {
                        var f = g.pop(),
                          m = f.nestedArrIndex,
                          v = f.value;
                        if (y(v))
                          if (x(v) && !at(v)) {
                            var S = { v, i: m, n: r.norm.get(v) };
                            l.push(S);
                          } else
                            O(v) &&
                              v.forEach(function (k, p) {
                                g.push({ nestedArrIndex: p, value: k });
                              });
                      }
                      a.$[c] = l;
                    })();
                  else if (x(u) && !at(u)) {
                    var h = { v: u, n: r.norm.get(u) };
                    a.$[c] = h;
                  }
                }
              }),
                this.records.push(a);
            },
          },
          {
            key: "toJSON",
            value: function () {
              return { keys: this.keys, records: this.records };
            },
          },
        ]),
        i
      );
    })();
    function Lt(i, n) {
      var o =
          arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {},
        r = o.getFn,
        a = r === void 0 ? d.getFn : r,
        s = o.fieldNormWeight,
        c = s === void 0 ? d.fieldNormWeight : s,
        u = new st({ getFn: a, fieldNormWeight: c });
      return u.setKeys(i.map(bt)), u.setSources(n), u.create(), u;
    }
    function Y(i) {
      var n =
          arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
        o = n.errors,
        r = o === void 0 ? 0 : o,
        a = n.currentLocation,
        s = a === void 0 ? 0 : a,
        c = n.expectedLocation,
        u = c === void 0 ? 0 : c,
        h = n.distance,
        l = h === void 0 ? d.distance : h,
        g = n.ignoreLocation,
        f = g === void 0 ? d.ignoreLocation : g,
        m = r / i.length;
      if (f) return m;
      var v = Math.abs(u - s);
      return l ? m + v / l : v ? 1 : m;
    }
    function Xt() {
      for (
        var i =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [],
          n =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : d.minMatchCharLength,
          o = [],
          r = -1,
          a = -1,
          s = 0,
          c = i.length;
        s < c;
        s += 1
      ) {
        var u = i[s];
        u && r === -1
          ? (r = s)
          : u ||
            r === -1 ||
            ((a = s - 1) - r + 1 >= n && o.push([r, a]), (r = -1));
      }
      return i[s - 1] && s - r >= n && o.push([r, s - 1]), o;
    }
    var j = 32;
    function Yt(i) {
      for (var n = {}, o = 0, r = i.length; o < r; o += 1) {
        var a = i.charAt(o);
        n[a] = (n[a] || 0) | (1 << (r - o - 1));
      }
      return n;
    }
    var Zt = (function () {
        function i(n) {
          var o = this,
            r =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {},
            a = r.location,
            s = a === void 0 ? d.location : a,
            c = r.threshold,
            u = c === void 0 ? d.threshold : c,
            h = r.distance,
            l = h === void 0 ? d.distance : h,
            g = r.includeMatches,
            f = g === void 0 ? d.includeMatches : g,
            m = r.findAllMatches,
            v = m === void 0 ? d.findAllMatches : m,
            S = r.minMatchCharLength,
            k = S === void 0 ? d.minMatchCharLength : S,
            p = r.isCaseSensitive,
            _ = p === void 0 ? d.isCaseSensitive : p,
            N = r.ignoreLocation,
            B = N === void 0 ? d.ignoreLocation : N;
          if (
            (Q(this, i),
            (this.options = {
              location: s,
              threshold: u,
              distance: l,
              includeMatches: f,
              findAllMatches: v,
              minMatchCharLength: k,
              isCaseSensitive: _,
              ignoreLocation: B,
            }),
            (this.pattern = _ ? n : n.toLowerCase()),
            (this.chunks = []),
            this.pattern.length)
          ) {
            var G = function (M, ct) {
                o.chunks.push({ pattern: M, alphabet: Yt(M), startIndex: ct });
              },
              w = this.pattern.length;
            if (w > j) {
              for (var E = 0, Z = w % j, $ = w - Z; E < $; )
                G(this.pattern.substr(E, j), E), (E += j);
              if (Z) {
                var P = w - j;
                G(this.pattern.substr(P), P);
              }
            } else G(this.pattern, 0);
          }
        }
        return (
          X(i, [
            {
              key: "searchIn",
              value: function (n) {
                var o = this.options,
                  r = o.isCaseSensitive,
                  a = o.includeMatches;
                if ((r || (n = n.toLowerCase()), this.pattern === n)) {
                  var s = { isMatch: !0, score: 0 };
                  return a && (s.indices = [[0, n.length - 1]]), s;
                }
                var c = this.options,
                  u = c.location,
                  h = c.distance,
                  l = c.threshold,
                  g = c.findAllMatches,
                  f = c.minMatchCharLength,
                  m = c.ignoreLocation,
                  v = [],
                  S = 0,
                  k = !1;
                this.chunks.forEach(function (_) {
                  var N = _.pattern,
                    B = _.alphabet,
                    G = _.startIndex,
                    w = (function (P, M, ct) {
                      var I =
                          arguments.length > 3 && arguments[3] !== void 0
                            ? arguments[3]
                            : {},
                        _t = I.location,
                        Kt = _t === void 0 ? d.location : _t,
                        wt = I.distance,
                        q = wt === void 0 ? d.distance : wt,
                        At = I.threshold,
                        Rt = At === void 0 ? d.threshold : At,
                        Ot = I.findAllMatches,
                        te = Ot === void 0 ? d.findAllMatches : Ot,
                        jt = I.minMatchCharLength,
                        Et = jt === void 0 ? d.minMatchCharLength : jt,
                        It = I.includeMatches,
                        Ft = It === void 0 ? d.includeMatches : It,
                        Ct = I.ignoreLocation,
                        U = Ct === void 0 ? d.ignoreLocation : Ct;
                      if (M.length > j) throw new Error(zt(j));
                      for (
                        var J,
                          W = M.length,
                          H = P.length,
                          b = Math.max(0, Math.min(Kt, H)),
                          T = Rt,
                          D = b,
                          K = Et > 1 || Ft,
                          ut = K ? Array(H) : [];
                        (J = P.indexOf(M, D)) > -1;

                      ) {
                        var ee = Y(M, {
                          currentLocation: J,
                          expectedLocation: b,
                          distance: q,
                          ignoreLocation: U,
                        });
                        if (((T = Math.min(ee, T)), (D = J + W), K))
                          for (var ht = 0; ht < W; )
                            (ut[J + ht] = 1), (ht += 1);
                      }
                      D = -1;
                      for (
                        var R = [],
                          lt = 1,
                          tt = W + H,
                          ne = 1 << (W - 1),
                          F = 0;
                        F < W;
                        F += 1
                      ) {
                        for (var et = 0, A = tt; et < A; )
                          Y(M, {
                            errors: F,
                            currentLocation: b + A,
                            expectedLocation: b,
                            distance: q,
                            ignoreLocation: U,
                          }) <= T
                            ? (et = A)
                            : (tt = A),
                            (A = Math.floor((tt - et) / 2 + et));
                        tt = A;
                        var Nt = Math.max(1, b - A + 1),
                          dt = te ? H : Math.min(b + A, H) + W,
                          V = Array(dt + 2);
                        V[dt + 1] = (1 << F) - 1;
                        for (var L = dt; L >= Nt; L -= 1) {
                          var nt = L - 1,
                            Pt = ct[P.charAt(nt)];
                          if (
                            (K && (ut[nt] = +!!Pt),
                            (V[L] = ((V[L + 1] << 1) | 1) & Pt),
                            F &&
                              (V[L] |= ((R[L + 1] | R[L]) << 1) | 1 | R[L + 1]),
                            V[L] & ne &&
                              (lt = Y(M, {
                                errors: F,
                                currentLocation: nt,
                                expectedLocation: b,
                                distance: q,
                                ignoreLocation: U,
                              })) <= T)
                          ) {
                            if (((T = lt), (D = nt) <= b)) break;
                            Nt = Math.max(1, 2 * b - D);
                          }
                        }
                        if (
                          Y(M, {
                            errors: F + 1,
                            currentLocation: b,
                            expectedLocation: b,
                            distance: q,
                            ignoreLocation: U,
                          }) > T
                        )
                          break;
                        R = V;
                      }
                      var ft = { isMatch: D >= 0, score: Math.max(0.001, lt) };
                      if (K) {
                        var Wt = Xt(ut, Et);
                        Wt.length ? Ft && (ft.indices = Wt) : (ft.isMatch = !1);
                      }
                      return ft;
                    })(n, N, B, {
                      location: u + G,
                      distance: h,
                      threshold: l,
                      findAllMatches: g,
                      minMatchCharLength: f,
                      includeMatches: a,
                      ignoreLocation: m,
                    }),
                    E = w.isMatch,
                    Z = w.score,
                    $ = w.indices;
                  E && (k = !0),
                    (S += Z),
                    E && $ && (v = [].concat(it(v), it($)));
                });
                var p = { isMatch: k, score: k ? S / this.chunks.length : 1 };
                return k && a && (p.indices = v), p;
              },
            },
          ]),
          i
        );
      })(),
      xt = [];
    function St(i, n) {
      for (var o = 0, r = xt.length; o < r; o += 1) {
        var a = xt[o];
        if (a.condition(i, n)) return new a(i, n);
      }
      return new Zt(i, n);
    }
    function $t(i, n) {
      var o = n.ignoreFieldNorm,
        r = o === void 0 ? d.ignoreFieldNorm : o;
      i.forEach(function (a) {
        var s = 1;
        a.matches.forEach(function (c) {
          var u = c.key,
            h = c.norm,
            l = c.score,
            g = u ? u.weight : null;
          s *= Math.pow(
            l === 0 && g ? Number.EPSILON : l,
            (g || 1) * (r ? 1 : h)
          );
        }),
          (a.score = s);
      });
    }
    function qt(i, n) {
      var o = i.matches;
      (n.matches = []),
        y(o) &&
          o.forEach(function (r) {
            if (y(r.indices) && r.indices.length) {
              var a = { indices: r.indices, value: r.value };
              r.key && (a.key = r.key.src),
                r.idx > -1 && (a.refIndex = r.idx),
                n.matches.push(a);
            }
          });
    }
    function Ut(i, n) {
      n.score = i.score;
    }
    function Jt(i, n) {
      var o =
          arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {},
        r = o.includeMatches,
        a = r === void 0 ? d.includeMatches : r,
        s = o.includeScore,
        c = s === void 0 ? d.includeScore : s,
        u = [];
      return (
        a && u.push(qt),
        c && u.push(Ut),
        i.map(function (h) {
          var l = h.idx,
            g = { item: n[l], refIndex: l };
          return (
            u.length &&
              u.forEach(function (f) {
                f(h, g);
              }),
            g
          );
        })
      );
    }
    var z = (function () {
      function i(n) {
        var o =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
          r = arguments.length > 2 ? arguments[2] : void 0;
        if (
          (Q(this, i),
          (this.options = C(C({}, d), o)),
          this.options.useExtendedSearch)
        )
          throw new Error(Vt);
        (this._keyStore = new Bt(this.options.keys)), this.setCollection(n, r);
      }
      return (
        X(i, [
          {
            key: "setCollection",
            value: function (n, o) {
              if (((this._docs = n), o && !(o instanceof st)))
                throw new Error("Incorrect 'index' type");
              this._myIndex =
                o ||
                Lt(this.options.keys, this._docs, {
                  getFn: this.options.getFn,
                  fieldNormWeight: this.options.fieldNormWeight,
                });
            },
          },
          {
            key: "add",
            value: function (n) {
              y(n) && (this._docs.push(n), this._myIndex.add(n));
            },
          },
          {
            key: "remove",
            value: function () {
              for (
                var n =
                    arguments.length > 0 && arguments[0] !== void 0
                      ? arguments[0]
                      : function () {
                          return !1;
                        },
                  o = [],
                  r = 0,
                  a = this._docs.length;
                r < a;
                r += 1
              ) {
                var s = this._docs[r];
                n(s, r) && (this.removeAt(r), (r -= 1), (a -= 1), o.push(s));
              }
              return o;
            },
          },
          {
            key: "removeAt",
            value: function (n) {
              this._docs.splice(n, 1), this._myIndex.removeAt(n);
            },
          },
          {
            key: "getIndex",
            value: function () {
              return this._myIndex;
            },
          },
          {
            key: "search",
            value: function (n) {
              var o =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : {},
                r = o.limit,
                a = r === void 0 ? -1 : r,
                s = this.options,
                c = s.includeMatches,
                u = s.includeScore,
                h = s.shouldSort,
                l = s.sortFn,
                g = s.ignoreFieldNorm,
                f = x(n)
                  ? x(this._docs[0])
                    ? this._searchStringList(n)
                    : this._searchObjectList(n)
                  : this._searchLogical(n);
              return (
                $t(f, { ignoreFieldNorm: g }),
                h && f.sort(l),
                mt(a) && a > -1 && (f = f.slice(0, a)),
                Jt(f, this._docs, { includeMatches: c, includeScore: u })
              );
            },
          },
          {
            key: "_searchStringList",
            value: function (n) {
              var o = St(n, this.options),
                r = this._myIndex.records,
                a = [];
              return (
                r.forEach(function (s) {
                  var c = s.v,
                    u = s.i,
                    h = s.n;
                  if (y(c)) {
                    var l = o.searchIn(c),
                      g = l.isMatch,
                      f = l.score,
                      m = l.indices;
                    g &&
                      a.push({
                        item: c,
                        idx: u,
                        matches: [{ score: f, value: c, norm: h, indices: m }],
                      });
                  }
                }),
                a
              );
            },
          },
          {
            key: "_searchLogical",
            value: function (n) {
              throw new Error("Logical search is not available");
            },
          },
          {
            key: "_searchObjectList",
            value: function (n) {
              var o = this,
                r = St(n, this.options),
                a = this._myIndex,
                s = a.keys,
                c = a.records,
                u = [];
              return (
                c.forEach(function (h) {
                  var l = h.$,
                    g = h.i;
                  if (y(l)) {
                    var f = [];
                    s.forEach(function (m, v) {
                      f.push.apply(
                        f,
                        it(o._findMatches({ key: m, value: l[v], searcher: r }))
                      );
                    }),
                      f.length && u.push({ idx: g, item: l, matches: f });
                  }
                }),
                u
              );
            },
          },
          {
            key: "_findMatches",
            value: function (n) {
              var o = n.key,
                r = n.value,
                a = n.searcher;
              if (!y(r)) return [];
              var s = [];
              if (O(r))
                r.forEach(function (m) {
                  var v = m.v,
                    S = m.i,
                    k = m.n;
                  if (y(v)) {
                    var p = a.searchIn(v),
                      _ = p.isMatch,
                      N = p.score,
                      B = p.indices;
                    _ &&
                      s.push({
                        score: N,
                        key: o,
                        value: v,
                        idx: S,
                        norm: k,
                        indices: B,
                      });
                  }
                });
              else {
                var c = r.v,
                  u = r.n,
                  h = a.searchIn(c),
                  l = h.isMatch,
                  g = h.score,
                  f = h.indices;
                l &&
                  s.push({ score: g, key: o, value: c, norm: u, indices: f });
              }
              return s;
            },
          },
        ]),
        i
      );
    })();
    return (
      (z.version = "6.6.2"),
      (z.createIndex = Lt),
      (z.parseIndex = function (i) {
        var n =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
          o = n.getFn,
          r = o === void 0 ? d.getFn : o,
          a = n.fieldNormWeight,
          s = a === void 0 ? d.fieldNormWeight : a,
          c = i.keys,
          u = i.records,
          h = new st({ getFn: r, fieldNormWeight: s });
        return h.setKeys(c), h.setIndexRecords(u), h;
      }),
      (z.config = d),
      z
    );
  }),
  typeof exports == "object" && typeof module < "u"
    ? (module.exports = t())
    : typeof define == "function" && define.amd
    ? define(t)
    : ((e = typeof globalThis < "u" ? globalThis : e || self).Fuse = t());
